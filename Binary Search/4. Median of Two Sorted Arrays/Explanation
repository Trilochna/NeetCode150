```java
// TIME COMPLEXITY =  LOG(MIN(A, B))
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // assign values to both the arrays for easily identifying which is the smaller one
        int A = nums1.length;
        int B = nums2.length;
```
In this section, the lengths of two input arrays `nums1` and `nums2` are stored in variables `A` and `B` respectively. These lengths will help determine which array is smaller and drive the binary search strategy.

```java
        if(A > B){
            // swap arrays
            return findMedianSortedArrays(nums2, nums1);
        }
```
Here, it is checked whether array `nums1` is longer than `nums2`. If so, the function `findMedianSortedArrays` is recursively called with swapped input arrays. This is done to ensure that the binary search is performed on the smaller array.

```java
        int total = A + B; // A+B
        int half = (total + 1) / 2;
```
`total` is calculated as the sum of lengths of both arrays. `half` represents the index around which the median would be located. For even-length merged arrays, this index will be the left boundary of the right half. For odd-length arrays, it will be the exact median index.

```java
        int left = 0;
        int right = A;
        var result = 0.0;
```
`left` and `right` are initialized for the binary search on array `nums1`, with `left` representing the left boundary and `right` the right boundary. `result` will hold the final median value.

```java
        while(left <= right){
            int mid = left + (right - left) / 2;
            int j = half - mid;
```
A binary search loop begins here. The middle index `mid` is calculated, representing the partition between elements of `nums1` on the left and `nums2` on the right. `j` represents the corresponding index in `nums2`.

```java
            int Aleft = (mid > 0) ? nums1[mid - 1] : Integer.MIN_VALUE;
            int Aright = (mid < A) ? nums1[mid] : Integer.MAX_VALUE;
            int Bleft = (j > 0) ? nums2[j - 1] : Integer.MIN_VALUE;
            int Bright = (j < B) ? nums2[j] : Integer.MAX_VALUE;
```
Four variables (`Aleft`, `Aright`, `Bleft`, and `Bright`) are used to store values that help identify the elements around the possible median. The ternary expressions handle cases where `mid` or `j` might be out of bounds by using extreme values (`Integer.MIN_VALUE` and `Integer.MAX_VALUE`).

```java
            if(Aleft <= Bright && Bleft <= Aright){
                if(total % 2 == 0){
                    result = (Math.max(Aleft, Bleft) + Math.min(Aright, Bright)) / 2.0;
                } else {
                    result = Math.max(Aleft, Bleft);
                }
                break;
            } else if(Aleft >= Bright){
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
```
The conditions within this block aim to find the correct partition that defines the median. The comparisons ensure that elements on the left side of the partition are smaller than or equal to those on the right side. If this condition is met, the median is calculated based on whether the total number of elements is even or odd.

If the `Aleft` values are greater than the `Bright` values, the partition needs to be adjusted to the left side, so the `right` boundary is updated.

Otherwise, if `Aleft` is smaller than `Bright`, the partition needs to be adjusted to the right side, so the `left` boundary is updated.

```java
        return result;
    }
}
```
Finally, the calculated median value (`result`) is returned.

Now, let's see an example to understand how the code works:

Example:
```java
int[] nums1 = {1, 3};
int[] nums2 = {2};
Solution solution = new Solution();
double median = solution.findMedianSortedArrays(nums1, nums2);
System.out.println("Median: " + median);
```

In this example, `nums1` has length `2` and `nums2` has length `1`. Since `A` is smaller than `B`, the binary search is performed on `nums1`.

1. `mid` will be initially set to `1` (midpoint of `0` and `2`), and `j` will be `1`.
2. `Aleft` is `1`, `Aright` is `3`, `Bleft` is `2`, and `Bright` is positive infinity (`Integer.MAX_VALUE`).
3. Since `Aleft <= Bright` and `Bleft <= Aright`, the condition is met, and the median is calculated: `(Math.max(1, 2) + Math.min(3, Infinity)) / 2.0`, which simplifies to `(2 + 3) / 2.0 = 2.5`.
4. The loop exits, and `result` is `2.5`, which is returned as the median.

So, for the input arrays `{1, 3}` and `{2}`, the median is `2.5`.
